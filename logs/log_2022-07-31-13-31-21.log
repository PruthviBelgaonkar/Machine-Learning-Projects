[2022-07-31 13:31:23,028]^;INFO^;224^;_internal.py^;_log()^; * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
[2022-07-31 13:33:14,703]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:33:14] "GET / HTTP/1.1" 200 -
[2022-07-31 13:33:18,423]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:33:18] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
[2022-07-31 13:33:34,002]^;INFO^;222^;configuration.py^;get_training_pipeline_config()^;Training Pipeline Config:TrainingPipelineConfig(artifact_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact')
[2022-07-31 13:33:34,019]^;INFO^;116^;pipeline.py^;run_pipeline()^;Pipeline starting.
[2022-07-31 13:33:34,022]^;INFO^;132^;pipeline.py^;run_pipeline()^;Pipeline experiment: Experiment(experiment_id='9acf72f9-aba1-46c3-bdaa-b556e52636c5', initialization_timestamp='2022-07-31-13-33-33', artifact_time_stamp='2022-07-31-13-33-33', running_status=True, start_time=datetime.datetime(2022, 7, 31, 13, 33, 34, 22360), stop_time=None, execution_time=None, message='Pipeline has been started.', experiment_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\experiment\\experiment.csv', accuracy=None, is_model_accepted=None)
[2022-07-31 13:33:34,062]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:33:34] "GET /train HTTP/1.1" 200 -
[2022-07-31 13:33:34,077]^;INFO^;67^;configuration.py^;get_data_ingestion_config()^;Data Ingestion Config :DataIngestionConfig(dataset_download_url='https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.tgz', tgz_download_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\tgz_data', raw_data_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\raw_data', ingested_train_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\ingested_data\\train', ingested_test_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\ingested_data\\test')
[2022-07-31 13:33:34,077]^;INFO^;18^;data_ingestion.py^;__init__()^;====================Data Ingestion Log Started.====================
[2022-07-31 13:33:34,078]^;INFO^;40^;data_ingestion.py^;download_housing_data()^;downloading file from :[https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.tgz] into :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\tgz_data\housing.tgz]
[2022-07-31 13:33:34,981]^;INFO^;42^;data_ingestion.py^;download_housing_data()^;File :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\tgz_data\housing.tgz] has been downloaded successfully
[2022-07-31 13:33:34,982]^;INFO^;56^;data_ingestion.py^;extract_tgz_file()^;Extracting tgz file :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\tgz_data\housing.tgz] into dir : [E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\raw_data]
[2022-07-31 13:33:35,000]^;INFO^;61^;data_ingestion.py^;extract_tgz_file()^;Extracting Completed
[2022-07-31 13:33:35,000]^;INFO^;74^;data_ingestion.py^;split_data_as_train_test()^;Reading csv file :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\raw_data\housing.csv]
[2022-07-31 13:33:35,099]^;INFO^;83^;data_ingestion.py^;split_data_as_train_test()^;Splitting Data into train test split
[2022-07-31 13:33:35,129]^;INFO^;98^;data_ingestion.py^;split_data_as_train_test()^;Exporting training dataset to file :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\ingested_data\train\housing.csv]
[2022-07-31 13:33:35,380]^;INFO^;103^;data_ingestion.py^;split_data_as_train_test()^;Exporting testing dataset to file :[E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\data_ingestion\2022-07-31-13-33-33\ingested_data\test\housing.csv]
[2022-07-31 13:33:35,475]^;INFO^;111^;data_ingestion.py^;split_data_as_train_test()^;Data Ingestion Artifact :[DataIngestionArtifact(train_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\ingested_data\\train\\housing.csv', test_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_ingestion\\2022-07-31-13-33-33\\ingested_data\\test\\housing.csv', is_ingested=True, message='Data Ingestion completed Successfully')]
[2022-07-31 13:33:35,476]^;INFO^;128^;data_ingestion.py^;__del__()^;====================Data Ingestion Log Completed.==================== 


[2022-07-31 13:33:35,476]^;INFO^;19^;data_validation.py^;__init__()^;====================Data Validation Log Started.==================== 


[2022-07-31 13:33:35,476]^;INFO^;39^;data_validation.py^;is_train_file_exists()^;Checking if training and test file is available
[2022-07-31 13:33:35,476]^;INFO^;51^;data_validation.py^;is_train_file_exists()^;Is train test file exists..?->True
[2022-07-31 13:33:38,121]^;INFO^;133^;data_validation.py^;initiate_data_validation()^;Data Validation Artifact : DataValidationArtifact(schema_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\config\\schema.yaml', report_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_validation\\2022-07-31-13-33-33\\report.json', report_page_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_validation\\2022-07-31-13-33-33\\report.html', is_validated=True, message='Data Validation performed successfully')
[2022-07-31 13:33:38,121]^;INFO^;139^;data_validation.py^;__del__()^;====================Data Validation Log Completed.==================== 


[2022-07-31 13:33:38,121]^;INFO^;145^;configuration.py^;get_data_transformation_config()^;Data Transformation Config :DataTransformationConfig(add_bedroom_per_room=True, transformed_train_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\transformed_data\\train', transformed_test_dir='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\transformed_data\\test', preprocessed_object_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\preprocessed\\preprocessed.pkl')
[2022-07-31 13:33:38,121]^;INFO^;97^;data_transformation.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Transformation log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2022-07-31 13:33:38,121]^;INFO^;148^;data_transformation.py^;initiate_data_transformation()^;Obtaining preprocessing object.
[2022-07-31 13:33:38,126]^;INFO^;133^;data_transformation.py^;get_data_transformer_object()^;Categorical columns: ['ocean_proximity']
[2022-07-31 13:33:38,126]^;INFO^;134^;data_transformation.py^;get_data_transformer_object()^;Numerical columns: ['longitude', 'latitude', 'housing_median_age', 'total_rooms', 'total_bedrooms', 'population', 'households', 'median_income']
[2022-07-31 13:33:38,126]^;INFO^;151^;data_transformation.py^;initiate_data_transformation()^;Obtaining training and test file path.
[2022-07-31 13:33:38,126]^;INFO^;157^;data_transformation.py^;initiate_data_transformation()^;Loading training and test data as pandas dataframe.
[2022-07-31 13:33:38,190]^;INFO^;166^;data_transformation.py^;initiate_data_transformation()^;Splitting input and target feature from training and testing dataframe.
[2022-07-31 13:33:38,194]^;INFO^;173^;data_transformation.py^;initiate_data_transformation()^;Applying preprocessing object on training dataframe and testing dataframe
[2022-07-31 13:33:38,288]^;INFO^;189^;data_transformation.py^;initiate_data_transformation()^;Saving transformed training and testing array.
[2022-07-31 13:33:38,293]^;INFO^;196^;data_transformation.py^;initiate_data_transformation()^;Saving preprocessing object.
[2022-07-31 13:33:38,298]^;INFO^;206^;data_transformation.py^;initiate_data_transformation()^;Data Transformation Artifact : DataTransformationArtifact(is_transformed=True, message='DATA TRANSFORMATION SUCCESSFULLY', transformed_train_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\transformed_data\\train\\housing.npz', transformed_test_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\transformed_data\\test\\housing.npz', preprocessed_object_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\data_transformation\\2022-07-31-13-33-33\\preprocessed\\preprocessed.pkl')
[2022-07-31 13:33:38,299]^;INFO^;213^;data_transformation.py^;__del__()^;====================Data Transformation Log Completed.==================== 


[2022-07-31 13:33:38,300]^;INFO^;178^;configuration.py^;get_model_trainer_config()^;Model Trainer Config : ModelTrainerConfig(trained_model_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\model_trainer\\2022-07-31-13-33-33\\trained_model\\model.pkl', base_accuracy=0.6, model_config_file_path='config\\model.yaml')
[2022-07-31 13:33:38,300]^;INFO^;45^;model_trainer.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model trainer log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2022-07-31 13:33:38,300]^;INFO^;53^;model_trainer.py^;initiate_model_trainer()^;Loading transformed training dataset
[2022-07-31 13:33:38,306]^;INFO^;57^;model_trainer.py^;initiate_model_trainer()^;Loading transformed testing dataset
[2022-07-31 13:33:38,307]^;INFO^;61^;model_trainer.py^;initiate_model_trainer()^;Splitting training and testing input and target feature
[2022-07-31 13:33:38,307]^;INFO^;65^;model_trainer.py^;initiate_model_trainer()^;Extracting model config file path
[2022-07-31 13:33:38,308]^;INFO^;68^;model_trainer.py^;initiate_model_trainer()^;Initializing model factory class using above model config file: config\model.yaml
[2022-07-31 13:33:38,314]^;INFO^;73^;model_trainer.py^;initiate_model_trainer()^;Expected accuracy: 0.6
[2022-07-31 13:33:38,314]^;INFO^;75^;model_trainer.py^;initiate_model_trainer()^;Initiating operation model selecttion
[2022-07-31 13:33:38,314]^;INFO^;358^;model_factory.py^;get_best_model()^;Started Initializing model from config file
[2022-07-31 13:33:38,314]^;INFO^;203^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.linear_model' from 'E:\\ineuronbasics\\Machine-Learning-Projects\\venv\\lib\\site-packages\\sklearn\\linear_model\\__init__.py'> import LinearRegression
[2022-07-31 13:33:38,316]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ LinearRegression().fit_intercept=True
[2022-07-31 13:33:38,687]^;INFO^;203^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.ensemble' from 'E:\\ineuronbasics\\Machine-Learning-Projects\\venv\\lib\\site-packages\\sklearn\\ensemble\\__init__.py'> import RandomForestRegressor
[2022-07-31 13:33:38,688]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ RandomForestRegressor().min_samples_leaf=3
[2022-07-31 13:33:38,690]^;INFO^;360^;model_factory.py^;get_best_model()^;Initialized model: [InitializedModelDetail(model_serial_number='module_0', model=LinearRegression(), param_grid_search={'fit_intercept': [True, False]}, model_name='sklearn.linear_model.LinearRegression'), InitializedModelDetail(model_serial_number='module_1', model=RandomForestRegressor(min_samples_leaf=3), param_grid_search={'min_samples_leaf': [6]}, model_name='sklearn.ensemble.RandomForestRegressor')]
[2022-07-31 13:33:38,690]^;INFO^;203^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.model_selection' from 'E:\\ineuronbasics\\Machine-Learning-Projects\\venv\\lib\\site-packages\\sklearn\\model_selection\\__init__.py'> import GridSearchCV
[2022-07-31 13:33:38,692]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(estimator=LinearRegression(),
             param_grid={'fit_intercept': [True, False]}).cv=5
[2022-07-31 13:33:38,694]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'fit_intercept': [True, False]}).verbose=2
[2022-07-31 13:33:38,694]^;INFO^;236^;model_factory.py^;execute_grid_search_operation()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> f"Training LinearRegression Started." <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:33:38,958]^;INFO^;203^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.model_selection' from 'E:\\ineuronbasics\\Machine-Learning-Projects\\venv\\lib\\site-packages\\sklearn\\model_selection\\__init__.py'> import GridSearchCV
[2022-07-31 13:33:38,960]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(estimator=RandomForestRegressor(min_samples_leaf=3),
             param_grid={'min_samples_leaf': [6]}).cv=5
[2022-07-31 13:33:38,962]^;INFO^;182^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(cv=5, estimator=RandomForestRegressor(min_samples_leaf=3),
             param_grid={'min_samples_leaf': [6]}).verbose=2
[2022-07-31 13:33:38,962]^;INFO^;236^;model_factory.py^;execute_grid_search_operation()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> f"Training RandomForestRegressor Started." <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:02,567]^;INFO^;345^;model_factory.py^;get_best_model_from_grid_searched_best_model_list()^;Acceptable model found:GridSearchedBestModel(model_serial_number='module_0', model=LinearRegression(), best_model=LinearRegression(fit_intercept=False), best_parameters={'fit_intercept': False}, best_score=0.6425567028055794)
[2022-07-31 13:35:02,568]^;INFO^;345^;model_factory.py^;get_best_model_from_grid_searched_best_model_list()^;Acceptable model found:GridSearchedBestModel(model_serial_number='module_1', model=RandomForestRegressor(min_samples_leaf=3), best_model=RandomForestRegressor(min_samples_leaf=6), best_parameters={'min_samples_leaf': 6}, best_score=0.8038145334367959)
[2022-07-31 13:35:02,569]^;INFO^;351^;model_factory.py^;get_best_model_from_grid_searched_best_model_list()^;Best model: GridSearchedBestModel(model_serial_number='module_1', model=RandomForestRegressor(min_samples_leaf=3), best_model=RandomForestRegressor(min_samples_leaf=6), best_parameters={'min_samples_leaf': 6}, best_score=0.8038145334367959)
[2022-07-31 13:35:02,569]^;INFO^;78^;model_trainer.py^;initiate_model_trainer()^;Best model found on training dataset: GridSearchedBestModel(model_serial_number='module_1', model=RandomForestRegressor(min_samples_leaf=3), best_model=RandomForestRegressor(min_samples_leaf=6), best_parameters={'min_samples_leaf': 6}, best_score=0.8038145334367959)
[2022-07-31 13:35:02,569]^;INFO^;80^;model_trainer.py^;initiate_model_trainer()^;Extracting trained model list.
[2022-07-31 13:35:02,569]^;INFO^;84^;model_trainer.py^;initiate_model_trainer()^;Evaluation all trained model on training and testing dataset both
[2022-07-31 13:35:02,570]^;INFO^;71^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Started evaluating model: [LinearRegression] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:02,575]^;INFO^;90^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:02,575]^;INFO^;91^;model_factory.py^;evaluate_regression_model()^;Train Score		 Test Score		 Average Score
[2022-07-31 13:35:02,575]^;INFO^;92^;model_factory.py^;evaluate_regression_model()^;0.6481553634454353		 0.6524330608386422		0.650287177366607
[2022-07-31 13:35:02,575]^;INFO^;94^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loss <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:02,576]^;INFO^;95^;model_factory.py^;evaluate_regression_model()^;Diff test train accuracy: [0.004277697393206825].
[2022-07-31 13:35:02,576]^;INFO^;96^;model_factory.py^;evaluate_regression_model()^;Train root mean squared error: [68627.87390018745].
[2022-07-31 13:35:02,576]^;INFO^;97^;model_factory.py^;evaluate_regression_model()^;Test root mean squared error: [67304.47314152].
[2022-07-31 13:35:02,576]^;INFO^;113^;model_factory.py^;evaluate_regression_model()^;Acceptable model found MetricInfoArtifact(model_name='LinearRegression(fit_intercept=False)', model_object=LinearRegression(fit_intercept=False), train_rmse=68627.87390018745, test_rmse=67304.47314152, train_accuracy=0.6481553634454353, test_accuracy=0.6524330608386422, model_accuracy=0.650287177366607, index_number=0). 
[2022-07-31 13:35:02,577]^;INFO^;71^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Started evaluating model: [RandomForestRegressor] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:03,087]^;INFO^;90^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:03,087]^;INFO^;91^;model_factory.py^;evaluate_regression_model()^;Train Score		 Test Score		 Average Score
[2022-07-31 13:35:03,087]^;INFO^;92^;model_factory.py^;evaluate_regression_model()^;0.9041538139631815		 0.516173754357225		0.6571730058322688
[2022-07-31 13:35:03,087]^;INFO^;94^;model_factory.py^;evaluate_regression_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loss <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2022-07-31 13:35:03,087]^;INFO^;95^;model_factory.py^;evaluate_regression_model()^;Diff test train accuracy: [0.3879800596059565].
[2022-07-31 13:35:03,087]^;INFO^;96^;model_factory.py^;evaluate_regression_model()^;Train root mean squared error: [35818.92065754348].
[2022-07-31 13:35:03,087]^;INFO^;97^;model_factory.py^;evaluate_regression_model()^;Test root mean squared error: [79408.94222570084].
[2022-07-31 13:35:03,087]^;INFO^;87^;model_trainer.py^;initiate_model_trainer()^;Best found model on both training and testing dataset.
[2022-07-31 13:35:03,089]^;INFO^;95^;model_trainer.py^;initiate_model_trainer()^;Saving model at path: E:\ineuronbasics\Machine-Learning-Projects\housing\artifact\model_trainer\2022-07-31-13-33-33\trained_model\model.pkl
[2022-07-31 13:35:03,095]^;INFO^;109^;model_trainer.py^;initiate_model_trainer()^;Model Trainer Artifact: ModelTrainerArtifact(is_trained=True, message='Model Trained successfully', trained_model_file_path='E:\\ineuronbasics\\Machine-Learning-Projects\\housing\\artifact\\model_trainer\\2022-07-31-13-33-33\\trained_model\\model.pkl', train_rmse=68627.87390018745, test_rmse=67304.47314152, train_accuracy=0.6481553634454353, test_accuracy=0.6524330608386422, model_accuracy=0.650287177366607)
[2022-07-31 13:35:03,098]^;INFO^;115^;model_trainer.py^;__del__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model trainer log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2022-07-31 13:35:26,212]^;INFO^;193^;app.py^;render_log_dir()^;req_path: logs
[2022-07-31 13:35:26,222]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:35:26] "GET /logs HTTP/1.1" 200 -
[2022-07-31 13:35:34,224]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:35:34] "GET /artifact HTTP/1.1" 200 -
[2022-07-31 13:35:36,303]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:35:36] "GET /artifact/housing/artifact HTTP/1.1" 200 -
[2022-07-31 13:35:40,347]^;INFO^;193^;app.py^;render_log_dir()^;req_path: logs
[2022-07-31 13:35:40,350]^;INFO^;224^;_internal.py^;_log()^;127.0.0.1 - - [31/Jul/2022 13:35:40] "GET /logs HTTP/1.1" 200 -
